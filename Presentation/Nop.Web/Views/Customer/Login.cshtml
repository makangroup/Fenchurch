@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.CurrentRequestProtocol);
}


<div class="page login-page paddingofcategoriespage">   
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="customer-blocks">

            <div class="tab-wrap">
                <!-- active tab on page load gets checked attribute -->
                <input type="radio" id="tab1" name="tabGroup1" class="tab" checked>
                <label for="tab1"><strong>Login</strong></label>
                <input type="radio" id="tab2" name="tabGroup1" class="tab">
                <a href="@registerUrl" for="tab2">Register</a>
                <div class="tab__content">
                    <div class="fieldset">
                        <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                            <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>                            
                            <div class="form-fields">
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="inputs">
                                        <label asp-for="Username" asp-postfix=":"></label>
                                        <input asp-for="Username" class="username" autofocus="autofocus" />
                                        <span asp-validation-for="Username"></span>
                                    </div>
                                }
                                else
                                {
                                    <div class="inputs forgotpassword1">
                                        <label asp-for="Email" asp-postfix=":"></label>
                                        <input asp-for="Email" class="email" autofocus="autofocus" />
                                        <span asp-validation-for="Email"></span>
                                    </div>
                                }
                                <div class="inputs forgotpassword1">
                                    <label asp-for="Password" asp-postfix=":"></label>
                                    <input asp-for="Password" class="password" />
                                    <span asp-validation-for="Password"></span>
                                </div>
                                <div class="inputs reversed">
                                    <input asp-for="RememberMe" />
                                    <label asp-for="RememberMe"></label>
                                    <div>
                                        <span class="forgot-password">
                                            <a asp-route="PasswordRecovery" style="font-size: 12px;">@T("Account.Login.ForgotPassword")</a>
                                        </span>
                                    </div>
                                </div>

                                @if (Model.DisplayCaptcha)
                                {
                                    <nop-captcha />
                                }
                            </div>
                            <div class="buttons loginRegisterBtn">
                                <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="external-authentication">
            @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
        </div>
        @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })
    </div>
</div>